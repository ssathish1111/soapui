package com.serversidegraphics.webservices.pcs;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlRootElement(name = "ImageInformationResponse", namespace = "http://pcs.webservices.serversidegraphics.com/1")
@XmlType(propOrder = {"imageInformationResult"})
public class ImageInformationResponse {

    private ImageInformationResult imageInformationResult;

    @XmlElement(name = "ImageInformationResult", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public ImageInformationResult getImageInformationResult() {
        return imageInformationResult;
    }

    public void setImageInformationResult(ImageInformationResult imageInformationResult) {
        this.imageInformationResult = imageInformationResult;
    }
}

package com.serversidegraphics.webservices.pcs;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlRootElement(name = "ImageInformationResult", namespace = "http://pcs.webservices.serversidegraphics.com/1")
@XmlType(propOrder = {
    "cardImageID", "designState", "errorCode", "transactionApprovalState", "cardPrinted", "cardMailed",
    "imageCheckingStartTimeStamp", "imageCheckingEndTimeStamp", "transactionApprovalStateID", "aggregatorID",
    "subscriberID", "productID", "designCreatedTimeStamp", "designStateTimeStamp", "designStateID",
    "designTransferStateID", "designTransferTimeStamp", "emailSent", "publicImage", "transactionApprovalTimeStamp",
    "transferredDefaultImage", "batchFileTimeStamp", "processed", "dataFields"
})
public class ImageInformationResult {

    private String cardImageID;
    private int designState;
    private int errorCode;
    private int transactionApprovalState;
    private String cardPrinted;
    private String cardMailed;
    private String imageCheckingStartTimeStamp;
    private String imageCheckingEndTimeStamp;
    private int transactionApprovalStateID;
    private int aggregatorID;
    private int subcriberID;
    private int productID;
    private String designCreatedTimeStamp;
    private String designStateTimeStamp;
    private int designStateID;
    private int designTransferStateID;
    private String designTransferTimeStamp;
    private boolean emailSent;
    private boolean publicImage;
    private String transactionApprovalTimeStamp;
    private boolean transferredDefaultImage;
    private String batchFileTimeStamp;
    private String processed;
    private String dataFields;

    @XmlElement(name = "CardImageID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getCardImageID() {
        return cardImageID;
    }

    public void setCardImageID(String cardImageID) {
        this.cardImageID = cardImageID;
    }

    @XmlElement(name = "DesignState", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getDesignState() {
        return designState;
    }

    public void setDesignState(int designState) {
        this.designState = designState;
    }

    @XmlElement(name = "ErrorCode", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(int errorCode) {
        this.errorCode = errorCode;
    }

    @XmlElement(name = "TransactionApprovalState", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getTransactionApprovalState() {
        return transactionApprovalState;
    }

    public void setTransactionApprovalState(int transactionApprovalState) {
        this.transactionApprovalState = transactionApprovalState;
    }

    @XmlElement(name = "CardPrinted", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getCardPrinted() {
        return cardPrinted;
    }

    public void setCardPrinted(String cardPrinted) {
        this.cardPrinted = cardPrinted;
    }

    @XmlElement(name = "CardMailed", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getCardMailed() {
        return cardMailed;
    }

    public void setCardMailed(String cardMailed) {
        this.cardMailed = cardMailed;
    }

    @XmlElement(name = "ImageCheckingStartTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getImageCheckingStartTimeStamp() {
        return imageCheckingStartTimeStamp;
    }

    public void setImageCheckingStartTimeStamp(String imageCheckingStartTimeStamp) {
        this.imageCheckingStartTimeStamp = imageCheckingStartTimeStamp;
    }

    @XmlElement(name = "ImageCheckingEndTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getImageCheckingEndTimeStamp() {
        return imageCheckingEndTimeStamp;
    }

    public void setImageCheckingEndTimeStamp(String imageCheckingEndTimeStamp) {
        this.imageCheckingEndTimeStamp = imageCheckingEndTimeStamp;
    }

    @XmlElement(name = "TransactionApprovalStateID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getTransactionApprovalStateID() {
        return transactionApprovalStateID;
    }

    public void setTransactionApprovalStateID(int transactionApprovalStateID) {
        this.transactionApprovalStateID = transactionApprovalStateID;
    }

    @XmlElement(name = "AggregatorID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getAggregatorID() {
        return aggregatorID;
    }

    public void setAggregatorID(int aggregatorID) {
        this.aggregatorID = aggregatorID;
    }

    @XmlElement(name = "SubscriberID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getSubscriberID() {
        return subcriberID;
    }

    public void setSubscriberID(int subcriberID) {
        this.subcriberID = subcriberID;
    }

    @XmlElement(name = "ProductID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getProductID() {
        return productID;
    }

    public void setProductID(int productID) {
        this.productID = productID;
    }

    @XmlElement(name = "DesignCreatedTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getDesignCreatedTimeStamp() {
        return designCreatedTimeStamp;
    }

    public void setDesignCreatedTimeStamp(String designCreatedTimeStamp) {
        this.designCreatedTimeStamp = designCreatedTimeStamp;
    }

    @XmlElement(name = "DesignStateTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getDesignStateTimeStamp() {
        return designStateTimeStamp;
    }

    public void setDesignStateTimeStamp(String designStateTimeStamp) {
        this.designStateTimeStamp = designStateTimeStamp;
    }

    @XmlElement(name = "DesignStateID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getDesignStateID() {
        return designStateID;
    }

    public void setDesignStateID(int designStateID) {
        this.designStateID = designStateID;
    }

    @XmlElement(name = "DesignTransferStateID", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public int getDesignTransferStateID() {
        return designTransferStateID;
    }

    public void setDesignTransferStateID(int designTransferStateID) {
        this.designTransferStateID = designTransferStateID;
    }

    @XmlElement(name = "DesignTransferTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getDesignTransferTimeStamp() {
        return designTransferTimeStamp;
    }

    public void setDesignTransferTimeStamp(String designTransferTimeStamp) {
        this.designTransferTimeStamp = designTransferTimeStamp;
    }

    @XmlElement(name = "EmailSent", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public boolean isEmailSent() {
        return emailSent;
    }

    public void setEmailSent(boolean emailSent) {
        this.emailSent = emailSent;
    }

    @XmlElement(name = "PublicImage", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public boolean isPublicImage() {
        return publicImage;
    }

    public void setPublicImage(boolean publicImage) {
        this.publicImage = publicImage;
    }

    @XmlElement(name = "TransactionApprovalTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getTransactionApprovalTimeStamp() {
        return transactionApprovalTimeStamp;
    }

    public void setTransactionApprovalTimeStamp(String transactionApprovalTimeStamp) {
        this.transactionApprovalTimeStamp = transactionApprovalTimeStamp;
    }

    @XmlElement(name = "TransferredDefaultImage", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public boolean isTransferredDefaultImage() {
        return transferredDefaultImage;
    }

    public void setTransferredDefaultImage(boolean transferredDefaultImage) {
        this.transferredDefaultImage = transferredDefaultImage;
    }

    @XmlElement(name = "BatchFileTimeStamp", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getBatchFileTimeStamp() {
        return batchFileTimeStamp;
    }

    public void setBatchFileTimeStamp(String batchFileTimeStamp) {
        this.batchFileTimeStamp = batchFileTimeStamp;
    }

    @XmlElement(name = "Processed", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getProcessed() {
        return processed;
    }

    public void setProcessed(String processed) {
        this.processed = processed;
    }

    @XmlElement(name = "DataFields", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public String getDataFields() {
        return dataFields;
    }

    public void setDataFields(String dataFields) {
        this.dataFields = dataFields;
    }
}



package com.serversidegraphics.webservices.pcs;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlRootElement(name = "Envelope", namespace = "http://schemas.xmlsoap.org/soap/envelope/")
@XmlType(propOrder = {"body"})
public class Envelope {

    private Body body;

    @XmlElement(name = "Body", namespace = "http://schemas.xmlsoap.org/soap/envelope/")
    public Body getBody() {
        return body;
    }

    public void setBody(Body body) {
        this.body = body;
    }
}

package com.serversidegraphics.webservices.pcs;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement(name = "Body", namespace = "http://schemas.xmlsoap.org/soap/envelope/")
public class Body {

    private ImageInformationResponse imageInformationResponse;

    @XmlElement(name = "ImageInformationResponse", namespace = "http://pcs.webservices.serversidegraphics.com/1")
    public ImageInformationResponse getImageInformationResponse() {
        return imageInformationResponse;
    }

    public void setImageInformationResponse(ImageInformationResponse imageInformationResponse) {
        this.imageInformationResponse = imageInformationResponse;
    }
}

package com.serversidegraphics.webservices.pcs;

import javax.xml.bind.annotation.XmlRegistry;

@XmlRegistry
public class ObjectFactory {

    public ObjectFactory() {
    }

    public Envelope createEnvelope() {
        return new Envelope();
    }

    public Body createBody() {
        return new Body();
    }

    public ImageInformationResponse createImageInformationResponse() {
        return new ImageInformationResponse();
    }

    public ImageInformationResult createImageInformationResult() {
        return new ImageInformationResult();
    }
}

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.StringReader;

public class JAXBExample {

    public static void main(String[] args) throws JAXBException {
        String xmlString = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n" +
                "   <soap:Body>\n" +
                "      <ImageInformationResponse xmlns=\"http://pcs.webservices.serversidegraphics.com/1\">\n" +
                "         <ImageInformationResult>\n" +
                "            <CardImageID>12345</CardImageID>\n" +
                "            <DesignState>-1</DesignState>\n" +
                "            <ErrorCode>2</ErrorCode>\n" +
                "            <TransactionApprovalState>0</TransactionApprovalState>\n" +
                "            <CardPrinted xsi:nil=\"true\"/>\n" +
                "            <CardMailed xsi:nil=\"true\"/>\n" +
                "            <ImageCheckingStartTimeStamp xsi:nil=\"true\"/>\n" +
                "            <ImageCheckingEndTimeStamp xsi:nil=\"true\"/>\n" +
                "            <TransactionApprovalStateID>0</TransactionApprovalStateID>\n" +
                "            <AggregatorID>0</AggregatorID>\n" +
                "            <SubscriberID>0</SubscriberID>\n" +
                "            <ProductID>0</ProductID>\n" +
                "            <DesignCreatedTimeStamp xsi:nil=\"true\"/>\n" +
                "            <DesignStateTimeStamp xsi:nil=\"true\"/>\n" +
                "            <DesignStateID>0</DesignStateID>\n" +
                "            <DesignTransferStateID>0</DesignTransferStateID>\n" +
                "            <DesignTransferTimeStamp xsi:nil=\"true\"/>\n" +
                "            <EmailSent>false</EmailSent>\n" +
                "            <PublicImage>false</PublicImage>\n" +
                "            <TransactionApprovalTimeStamp xsi:nil=\"true\"/>\n" +
                "            <TransferredDefaultImage>false</TransferredDefaultImage>\n" +
                "            <BatchFileTimeStamp xsi:nil=\"true\"/>\n" +
                "            <Processed xsi:nil=\"true\"/>\n" +
                "            <DataFields/>\n" +
                "         </ImageInformationResult>\n" +
                "      </ImageInformationResponse>\n" +
                "   </soap:Body>\n" +
                "</soap:Envelope>";

        JAXBContext context = JAXBContext.newInstance(Envelope.class);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        StringReader reader = new StringReader(xmlString);
        Envelope envelope = (Envelope) unmarshaller.unmarshal(reader);

        System.out.println("CardImageID: " + envelope.getBody().getImageInformationResponse().getImageInformationResult().getCardImageID());
    }
}



import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.integration.file.remote.RemoteFileTemplate;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FileUploadServiceTest {

    @Mock
    private RemoteFileTemplate<Object> sftpRemoteFileTemplate;

    @Mock
    private Config config;

    @Mock
    private Config.Astra astraConfig;

    @InjectMocks
    private FileUploadService fileUploadService;

    @Test
    void sendOutput_SuccessfulUpload() throws Exception {
        // Arrange
        StringBuilder content = new StringBuilder("test content");
        String fileName = "test.txt";
        String remotePath = "/remote/path";
        
        when(config.getAstra()).thenReturn(astraConfig);
        when(astraConfig.getAstraInboundPath()).thenReturn(remotePath);
        when(sftpRemoteFileTemplate.send(any(Message.class), any())).thenReturn("remote/path/test.txt");

        // Act
        boolean result = fileUploadService.sendOutput(content, fileName);

        // Assert
        assertTrue(result);
        verify(sftpRemoteFileTemplate).send(any(Message.class), any());
        
        // Cleanup
        Files.deleteIfExists(new File(fileName).toPath());
    }

    @Test
    void sendOutput_SFTPFailure_ThrowsException() {
        // Arrange
        StringBuilder content = new StringBuilder("test content");
        String fileName = "test.txt";
        String remotePath = "/remote/path";
        
        when(config.getAstra()).thenReturn(astraConfig);
        when(astraConfig.getAstraInboundPath()).thenReturn(remotePath);
        when(sftpRemoteFileTemplate.send(any(Message.class), any()))
            .thenThrow(new RuntimeException("SFTP error"));

        // Act & Assert
        assertThrows(AstraFileInboundException.class, () -> {
            fileUploadService.sendOutput(content, fileName);
        });
        
        // Verify local file is cleaned up
        assertFalse(new File(fileName).exists());
    }

    @Test
    void sendOutput_FileCreationFailure_ThrowsException() {
        // Arrange
        StringBuilder content = new StringBuilder("test content");
        String fileName = "/invalid/path/test.txt"; // Invalid path
        
        // Act & Assert
        assertThrows(AstraFileInboundException.class, () -> {
            fileUploadService.sendOutput(content, fileName);
        });
    }

    @Test
    void sendOutput_NullInput_ThrowsException() {
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> {
            fileUploadService.sendOutput(null, "file.txt");
        });
        
        assertThrows(IllegalArgumentException.class, () -> {
            fileUploadService.sendOutput(new StringBuilder(), null);
        });
    }

    @Test
    void sendOutput_VerifyLocalFileCleanup() throws Exception {
        // Arrange
        StringBuilder content = new StringBuilder("test content");
        String fileName = "test_cleanup.txt";
        String remotePath = "/remote/path";
        
        when(config.getAstra()).thenReturn(astraConfig);
        when(astraConfig.getAstraInboundPath()).thenReturn(remotePath);
        when(sftpRemoteFileTemplate.send(any(Message.class), any()))
            .thenThrow(new RuntimeException("SFTP error"));

        // Act
        try {
            fileUploadService.sendOutput(content, fileName);
        } catch (AstraFileInboundException e) {
            // Expected
        }

        // Assert
        assertFalse(new File(fileName).exists(), "Local file should be deleted");
    }

    @Test
    void sendOutput_VerifyFileContent() throws Exception {
        // Arrange
        String testContent = "test content";
        StringBuilder content = new StringBuilder(testContent);
        String fileName = "test_content.txt";
        String remotePath = "/remote/path";
        
        when(config.getAstra()).thenReturn(astraConfig);
        when(astraConfig.getAstraInboundPath()).thenReturn(remotePath);
        when(sftpRemoteFileTemplate.send(any(Message.class), any())).thenReturn("remote/path/test.txt");

        // Act
        fileUploadService.sendOutput(content, fileName);

        // Assert
        File tempFile = new File(fileName);
        assertTrue(tempFile.exists());
        assertEquals(testContent, Files.readString(tempFile.toPath()));
        
        // Cleanup
        Files.deleteIfExists(tempFile.toPath());
    }
}


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.InputStream;
import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ThalesFileReaderTest {

    @Mock
    private RemoteFileTemplate<Object> sftpRemoteFileTemplate;

    @Mock
    private RemoteFileTemplate.SessionCallback<SomeObject, Object> sessionCallback;

    @Mock
    private InputStream inputStream;

    @InjectMocks
    private ThalesFileReader thalesFileReader;

    @Test
    void readFileFromThales_Success() throws Exception {
        // Arrange
        String fileName = "TEST_FILE_NAME_1234567890";
        when(thalesFileReader.getFilesNameList())
            .thenReturn(Arrays.asList("TEST_FILE_NAME_1234567890.xml"));
        when(sftpRemoteFileTemplate.execute(any()))
            .thenAnswer(invocation -> {
                try (InputStream is = inputStream) {
                    return new SomeObject(); // Mock return object
                }
            });

        // Act
        SomeObject result = thalesFileReader.readFileFromThales(fileName);

        // Assert
        assertNotNull(result);
        verify(sftpRemoteFileTemplate).execute(any());
    }

    @Test
    void readFileFromThales_FileNameTooShort() {
        assertThrows(IllegalArgumentException.class, () -> 
            thalesFileReader.readFileFromThales("short"));
    }

    @Test
    void readFileFromThales_NoMatchingFiles() {
        when(thalesFileReader.getFilesNameList())
            .thenReturn(Arrays.asList("OTHER_FILE.xml"));
        
        assertNull(thalesFileReader.readFileFromThales("TEST_FILE_NAME_1234567890"));
    }

    @Test
    void readFileFromThales_NullFileNameList() {
        when(thalesFileReader.getFilesNameList()).thenReturn(null);
        
        assertNull(thalesFileReader.readFileFromThales("TEST_FILE_NAME_1234567890"));
    }

    @Test
    void readFileFromThales_FileNotFoundInThales() throws Exception {
        when(thalesFileReader.getFilesNameList())
            .thenReturn(Arrays.asList("TEST_FILE_NAME_1234567890.xml"));
        when(sftpRemoteFileTemplate.execute(any()))
            .thenThrow(new RuntimeException("File not found"));

        assertThrows(AstraFileOutboundException.class, () ->
            thalesFileReader.readFileFromThales("TEST_FILE_NAME_1234567890"));
    }

    @Test
    void readFileFromThales_ParsingError() throws Exception {
        when(thalesFileReader.getFilesNameList())
            .thenReturn(Arrays.asList("TEST_FILE_NAME_1234567890.xml"));
        when(sftpRemoteFileTemplate.execute(any()))
            .thenAnswer(invocation -> {
                try (InputStream is = inputStream) {
                    throw new RuntimeException("Parsing error");
                }
            });

        assertThrows(AstraFileOutboundException.class, () ->
            thalesFileReader.readFileFromThales("TEST_FILE_NAME_1234567890"));
    }
}
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(MockitoExtension.class)
class FileServiceTest {

    @Mock
    private Config config;
    
    @Mock
    private Config.Astra astra;
    
    @Mock
    private SftpRemoteFileTemplate sftpRemoteFileTemplate;
    
    @Mock
    private Session<ChannelSftp.LsEntry> session;
    
    @InjectMocks
    private YourClassUnderTest fileService; // Replace with your actual class name

    private final String testPath = "/test/path";

    @BeforeEach
    void setUp() {
        when(config.getAstra()).thenReturn(astra);
        when(astra.getAstraOutboundPath()).thenReturn(testPath);
    }

    @Test
    void getFilesNameList_shouldReturnFileNames_whenFilesExist() throws Exception {
        // Arrange
        DirEntry file1 = mock(DirEntry.class);
        DirEntry file2 = mock(DirEntry.class);
        
        when(file1.getFilename()).thenReturn("file1.txt");
        when(file2.getFilename()).thenReturn("file2.txt");
        
        when(sftpRemoteFileTemplate.execute(any())).thenAnswer(invocation -> {
            SessionCallback<DirEntry[], ChannelSftp.LsEntry> callback = invocation.getArgument(0);
            return callback.doInSession(session);
        });
        
        when(session.list(testPath)).thenReturn(new DirEntry[]{file1, file2});

        // Act
        List<String> result = fileService.getFilesNameList();

        // Assert
        assertEquals(2, result.size());
        assertTrue(result.contains("file1.txt"));
        assertTrue(result.contains("file2.txt"));
    }

    @Test
    void getFilesNameList_shouldReturnEmptyList_whenNoFilesExist() throws Exception {
        // Arrange
        when(sftpRemoteFileTemplate.execute(any())).thenAnswer(invocation -> {
            SessionCallback<DirEntry[], ChannelSftp.LsEntry> callback = invocation.getArgument(0);
            return callback.doInSession(session);
        });
        
        when(session.list(testPath)).thenReturn(new DirEntry[0]);

        // Act
        List<String> result = fileService.getFilesNameList();

        // Assert
        assertTrue(result.isEmpty());
    }

    @Test
    void getFilesNameList_shouldReturnEmptyList_whenExceptionOccurs() throws Exception {
        // Arrange
        when(sftpRemoteFileTemplate.execute(any())).thenThrow(new RuntimeException("SFTP error"));

        // Act
        List<String> result = fileService.getFilesNameList();

        // Assert
        assertTrue(result.isEmpty());
    }
Here's the complete solution for mapping the provided JSON structure with nested objects and arrays, including handling for invalid data types:

### 1. Oracle Database Mapping Configuration

```sql
-- Clear previous mappings if needed
TRUNCATE TABLE json_field_mapping;

-- Insert new mappings for the given JSON structure
INSERT INTO json_field_mapping (source_pointer, target_field, data_type, default_value) 
VALUES 
  ('/id', 'user_id', 'NUMBER', '0'),
  ('/name', 'full_name', 'STRING', 'Unknown'),
  ('/address/city', 'city', 'STRING', ''),
  ('/phoneNumber/0/number', 'primary_phone', 'STRING', ''),
  ('/phoneNumber/0/type', 'phone_type', 'STRING', 'mobile'),
  ('/phoneNumber', 'phone_numbers', 'ARRAY', '[]');
```

### 2. Enhanced Transformation Service

```java
@Service
public class JsonTransformerService {
    // ... (previous dependencies and constructor)

    private void applyMappings(JsonNode source, ObjectNode target, List<FieldMapping> mappings) {
        for (FieldMapping mapping : mappings) {
            try {
                // Special handling for arrays
                if ("ARRAY".equalsIgnoreCase(mapping.getDataType())) {
                    handleArrayField(source, target, mapping);
                    continue;
                }
                
                JsonNode value = source.at(mapping.getSourcePointer());
                
                if (value.isMissingNode() || value.isNull()) {
                    applyDefaultValue(target, mapping);
                } else {
                    applyValueConversion(target, mapping, value);
                }
            } catch (Exception e) {
                applyDefaultValue(target, mapping);
            }
        }
    }

    private void handleArrayField(JsonNode source, ObjectNode target, FieldMapping mapping) {
        JsonNode arrayNode = source.at(mapping.getSourcePointer());
        ArrayNode targetArray = objectMapper.createArrayNode();
        
        if (arrayNode.isArray()) {
            for (JsonNode item : arrayNode) {
                if (item.isObject()) {
                    ObjectNode phoneNode = objectMapper.createObjectNode();
                    if (item.has("number")) {
                        phoneNode.put("number", item.get("number").asText());
                    }
                    if (item.has("type")) {
                        phoneNode.put("type", item.get("type").asText());
                    }
                    targetArray.add(phoneNode);
                }
            }
        }
        
        target.set(mapping.getTargetField(), targetArray);
    }

    private void applyValueConversion(ObjectNode target, FieldMapping mapping, JsonNode value) {
        switch (mapping.getDataType().toUpperCase()) {
            case "NUMBER":
                if (value.isTextual()) {
                    try {
                        target.put(mapping.getTargetField(), Long.parseLong(value.asText()));
                    } catch (NumberFormatException e) {
                        target.put(mapping.getTargetField(), mapping.getDefaultValue());
                    }
                } else {
                    target.put(mapping.getTargetField(), value.asLong());
                }
                break;
                
            case "STRING":
                target.put(mapping.getTargetField(), value.asText());
                break;
                
            case "ARRAY":
                // Handled separately in handleArrayField
                break;
                
            default:
                target.set(mapping.getTargetField(), value);
        }
    }
    
    // ... (rest of the service remains same)
}
```

### 3. Expected Output Structure

For the provided input JSON, the transformed output will be:

```json
[
  {
    "user_id": 123,
    "full_name": "John Doe",
    "city": "New York",
    "primary_phone": "",
    "phone_type": "mobile",
    "phone_numbers": []
  },
  {
    "user_id": 0,
    "full_name": "sath",
    "city": "ind",
    "primary_phone": "12344",
    "phone_type": "mobile",
    "phone_numbers": [
      {
        "number": "12344",
        "type": "mobile"
      }
    ]
  },
  {
    "user_id": 456,
    "full_name": "Alice",
    "city": "London",
    "primary_phone": "12344",
    "phone_type": "mobile",
    "phone_numbers": [
      {
        "number": "12344",
        "type": "mobile"
      }
    ]
  }
]
```

### 4. Key Handling Scenarios

1. **Invalid Number Handling**:
   - The invalid ID `"s"` falls back to default value `0`
   - String `"456"` gets successfully converted to number

2. **Phone Number Array**:
   - Full array is preserved in `phone_numbers` field
   - First phone number's details are also extracted to top-level fields

3. **Missing Fields**:
   - First object without phone numbers gets empty array and default values
   - Default values come from database configuration

4. **Nested Object Handling**:
   - Address city is properly extracted from nested object
   - Phone number details are extracted from array objects

### 5. Additional Configuration Options

To handle more complex cases, you can extend the database configuration:

```sql
-- Add mapping for secondary phone numbers
INSERT INTO json_field_mapping (source_pointer, target_field, data_type) 
VALUES ('/phoneNumber/1/number', 'secondary_phone', 'STRING');

-- Add validation rules
ALTER TABLE json_field_mapping ADD (
    validation_regex VARCHAR2(200),
    is_required NUMBER(1) DEFAULT 0
);

-- Update phone number validation
UPDATE json_field_mapping 
SET validation_regex = '^[0-9]{10}$', 
    is_required = 1
WHERE target_field IN ('primary_phone', 'secondary_phone');
```

### 6. Enhanced Validation Logic

Add this to your service:

```java
private boolean isValidField(FieldMapping mapping, String value) {
    if (mapping.getIsRequired() == 1 && (value == null || value.isEmpty())) {
        return false;
    }
    
    if (mapping.getValidationRegex() != null) {
        return value.matches(mapping.getValidationRegex());
    }
    
    return true;
}
```

This solution provides:
- Complete mapping for the given JSON structure
- Robust handling of invalid data
- Preservation of array structures
- Extraction of specific array elements to top-level fields
- Configurable default values and validation
- Type conversion with fallback behavior

@Service
public class JsonTransformerService {
    
    private final FieldMappingRepository mappingRepository;
    private final ObjectMapper objectMapper;
    
    public JsonTransformerService(FieldMappingRepository mappingRepository) {
        this.mappingRepository = mappingRepository;
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
        this.objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    }
    
    public void transformJson(Path inputPath, Path outputPath) throws IOException {
        List<FieldMapping> mappings = mappingRepository.findAllOrdered();
        
        try (JsonParser parser = objectMapper.getFactory().createParser(inputPath.toFile());
             JsonGenerator generator = objectMapper.getFactory().createGenerator(outputPath.toFile(), JsonEncoding.UTF8)) {
            
            generator.useDefaultPrettyPrinter();
            
            if (parser.nextToken() != JsonToken.START_ARRAY) {
                throw new JsonParseException(parser, "Root must be a JSON array");
            }
            
            generator.writeStartArray();
            
            while (parser.nextToken() == JsonToken.START_OBJECT) {
                JsonNode sourceNode = objectMapper.readTree(parser);
                ObjectNode targetNode = objectMapper.createObjectNode();
                
                applyMappings(sourceNode, targetNode, mappings);
                generator.writeTree(targetNode);
            }
            
            generator.writeEndArray();
        }
    }
    
    private void applyMappings(JsonNode source, ObjectNode target, List<FieldMapping> mappings) {
        for (FieldMapping mapping : mappings) {
            JsonNode value = source.at(mapping.getSourcePointer());
            
            if (value.isMissingNode() || value.isNull()) {
                applyDefaultValue(target, mapping);
            } else {
                applyValueConversion(target, mapping, value);
            }
        }
    }
    
    private void applyValueConversion(ObjectNode target, FieldMapping mapping, JsonNode value) {
        try {
            switch (mapping.getDataType().toUpperCase()) {
                case "NUMBER":
                    target.put(mapping.getTargetField(), value.asLong());
                    break;
                case "STRING":
                    target.put(mapping.getTargetField(), value.asText());
                    break;
                case "BOOLEAN":
                    target.put(mapping.getTargetField(), value.asBoolean());
                    break;
                case "DATE":
                    LocalDate date = LocalDate.parse(value.asText());
                    target.put(mapping.getTargetField(), date.toString());
                    break;
                default:
                    target.set(mapping.getTargetField(), value);
            }
        } catch (Exception e) {
            applyDefaultValue(target, mapping);
        }
    }
    
    private void applyDefaultValue(ObjectNode target, FieldMapping mapping) {
        if (mapping.getDefaultValue() != null) {
            switch (mapping.getDataType().toUpperCase()) {
                case "NUMBER":
                    target.put(mapping.getTargetField(), Long.parseLong(mapping.getDefaultValue()));
                    break;
                case "BOOLEAN":
                    target.put(mapping.getTargetField(), Boolean.parseBoolean(mapping.getDefaultValue()));
                    break;
                default:
                    target.put(mapping.getTargetField(), mapping.getDefaultValue());
            }
        }
    }
}

{
  "java.jdt.ls.vmargs": "-javaagent:${extensionPath:vscode-lombok}/lombok.jar",
  "java.import.gradle.annotationProcessingEnabled": true,
  "java.import.maven.annotationProcessingEnabled": true
}
